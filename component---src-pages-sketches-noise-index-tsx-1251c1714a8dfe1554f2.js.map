{"version":3,"sources":["webpack:///./src/sketches/noise/sketchSettings.ts","webpack:///./src/sketches/noise/index.ts","webpack:///./src/pages/sketches/noise/index.tsx"],"names":["sketchSettings","radius","type","value","props","min","max","step","title","Size","window","innerWidth","innerHeight","defaultSettings","settingsTransformer","toObject","sketch1","settings","p","x","y","fps","s1","random","s2","setup","createCanvas","background","draw","dt","Number","millis","toFixed","dts","noiseSeed","stroke","noise","circle","frameRate","noStroke","textSize","fill","rect","text","SketchFrame$","React","memo","useState","className","FullscreenDemo","top","left","PageTitle","to","right","SketchWrapper$","P5Sketch","sketch","styled","div","Colors","CSS","bg"],"mappings":"mPAaiBA,EAbqB,CAClCC,OAAQ,CACNC,KAAM,QACNC,MAAO,GACPC,MAAO,CACLC,IAAK,GACLC,IAAK,IACLC,KAAM,GAERC,MAAO,WCCTC,EAAO,IAEX,GAAsB,oBAAXC,OAAwB,OACGA,OAA5BC,EADyB,EACzBA,WAAYC,EADa,EACbA,YAGpBH,EAFiBG,EAAcD,EAEXA,EAAa,GAAKC,EAAc,IAGtD,IAMaC,EAAkBC,IAAoBC,SAA0Bf,GAkF9DgB,EAhFC,SAACC,GAAD,OAA+B,SAACC,GAC9C,IAGIC,EAAWC,EAHXC,EAAc,EACdC,EAAaJ,EAAEK,OAAO,EAAG,KACzBC,EAAaN,EAAEK,OAAO,EAAG,KAG7BL,EAAEO,MAAQ,WACRP,EAAEQ,aAAajB,EAAMA,GACrBS,EAAES,WAAW,UAGfT,EAAEU,KAAO,WACP,IAAIC,EAAKC,OAAOZ,EAAEa,SAASC,QAAQ,IAC/BC,EAAMJ,EAAK,IAGfX,EAAEgB,UAAUZ,GACZJ,EAAEiB,OAAO,SACThB,EAAIV,EAAOS,EAAEkB,MAAM,EAAGH,GACtBb,EAAIX,EAAOS,EAAEkB,MAAM,EAAGH,EAAI,IAC1Bf,EAAEmB,OAAOlB,EAAGC,EAAG,IACfF,EAAEmB,OAAO5B,EAAOU,EAAGC,EAAG,IAEtBF,EAAEgB,UAAUV,GACZN,EAAEiB,OAAO,OACThB,EAAIV,EAAOS,EAAEkB,MAAM,EAAGH,GACtBb,EAAIX,EAAOS,EAAEkB,MAAM,EAAGH,EAAI,GAC1Bf,EAAEmB,OAAOlB,EAAGC,EAAE,IACdF,EAAEmB,OAAO5B,EAAOU,EAAGC,EAAG,IAGlBS,EAAK,GAAM,IAAGR,EAAMH,EAAEoB,aAC1BpB,EAAEqB,WACFrB,EAAEsB,SAAS,IACXtB,EAAEuB,KAAK,SACPvB,EAAEwB,KAAK,EAAGjC,EAAO,GAAI,IAAKA,EAAO,IACjCS,EAAEuB,KAAK,mBACPvB,EAAEyB,KAAF,SAAetB,GAAOA,EAAIW,QAAQ,IAAM,EAAGvB,EAAO,M,YCnBhDmC,GAHSC,cAAMC,MA7BkB,WAAM,MACXC,mBAASlC,GAAlCI,EADoC,UAG3C,OACE,yBAAK+B,UAAU,eACb,kBAAC,IAAD,CAAKxC,MAAM,UAEX,kBAACyC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASC,KAAG,EAACC,MAAI,GACf,kBAACC,EAAA,EAAD,CAAW5C,MAAM,iBACjB,kBAAC,OAAD,CAAM6C,GAAG,KAAT,SAGF,kBAAC,IAAD,CAASH,KAAG,EAACI,OAAK,KAKpB,kBAACV,EAAD,KACE,kBAACW,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,OAAQA,EAAOxC,YAWhByC,IAAOC,IAAV,wCAAGD,CAAH,wIAQIE,IAAOC,IAAIC,KAG3BP,EAAiBG,IAAOC,IAAV,wCAAGD,CAAH","file":"component---src-pages-sketches-noise-index-tsx-1251c1714a8dfe1554f2.js","sourcesContent":["const sketchSettings: ISettingsList = {\n    radius: {\n      type: 'range',\n      value: 50,\n      props: {\n        min: 10,\n        max: 200,\n        step: 1\n      },\n      title: 'Radius'\n    }\n  }\n  \n  export default sketchSettings","import p5 from \"p5\"\nimport polypoints from 'geometry/polypoints'\nimport { Colors } from \"constants/Styles\"\nimport settingsTransformer from 'utils/settingsTransformer'\nimport sketchSettings from './sketchSettings'\n\nexport interface ISketchSettings {\n  radius: number\n}\n\nlet Size = 300;\n\nif (typeof window !== \"undefined\") {\n  const { innerWidth, innerHeight } = window\n  let isPortrait = innerHeight > innerWidth\n\n  Size = isPortrait ? innerWidth - 64 : innerHeight - 100\n}\n\nconst noiseLoop = (p: p5, d: number, min: number, max: number, angle: number) => {\n  let xOff = p.map(Math.cos(angle), -1, 1, 0, d)\n  let yOff = p.map(Math.sin(angle), -1, 1, 0, d)\n  return p.map(p.noise(xOff, yOff), 0, 1, min, max)\n}\n\nexport const defaultSettings = settingsTransformer.toObject<ISketchSettings>(sketchSettings)\n\nconst sketch1 = (settings: ISketchSettings) => (p: p5) => {\n  let fps: number = 0\n  let s1: number = p.random(0, 1000)\n  let s2: number = p.random(0, 1000)\n  let x: number, y: number;\n\n  p.setup = () => {\n    p.createCanvas(Size, Size)\n    p.background('white')\n  }\n\n  p.draw = () => {\n    let dt = Number(p.millis().toFixed(2))\n    let dts = dt / 4000\n    \n    // p.noiseDetail(8, 0.2)\n    p.noiseSeed(s1)\n    p.stroke('black')\n    x = Size * p.noise(0, dts)\n    y = Size * p.noise(0, dts+10)\n    p.circle(x, y, 0.5)\n    p.circle(Size - x, y, 0.5)\n    \n    p.noiseSeed(s2)\n    p.stroke('red')\n    x = Size * p.noise(0, dts)\n    y = Size * p.noise(0, dts+2)\n    p.circle(x, y,0.5)\n    p.circle(Size - x, y, 0.5)\n\n    // Show framerate\n    if (dt % 6 === 0) fps = p.frameRate()\n    p.noStroke()\n    p.textSize(10)\n    p.fill('white')\n    p.rect(0, Size - 20, 160, Size - 20)\n    p.fill('rgba(0,0,0,0.5)')\n    p.text(`FPS: ${fps && fps.toFixed(0)}`, 6, Size - 6)\n  }\n}\n\nconst sketch2 = (settings: ISketchSettings) => (p: p5) => {\n  let fps: number = 0\n  let s1: number = p.random(0, 1000)\n  let s2: number = p.random(0, 1000)\n  let s3: number = p.random(0, 1000)\n  let s4: number = p.random(0, 1000)\n\n  p.setup = () => {\n    p.createCanvas(Size, Size)\n    p.background('white')\n  }\n\n  p.draw = () => {\n    p.clear()\n    \n    let dt = Number(p.millis().toFixed(1))\n\n    p.stroke(`rgb(50, 50, 50)`)\n    p.noiseSeed(s1)\n    p.line(0, Size * p.noise(0, dt/2000), Size, Size * p.noise(0, dt/3000))\n    p.noiseSeed(s2)\n    p.line(0, Size * p.noise(0, dt/2000), Size, Size * p.noise(0, dt/3000))\n    \n    p.stroke(`rgb(50, 50, 50)`)\n    p.noiseSeed(s3)\n    p.line(Size * p.noise(dt/2000), 0, Size * p.noise(dt/3000), Size)\n    p.noiseSeed(s4)\n    p.line(Size * p.noise(dt/2000), 0, Size * p.noise(dt/3000), Size)\n\n\n    // Show framerate\n    if (dt % 6 === 0) fps = p.frameRate()\n    p.noStroke()\n    p.textSize(10)\n    p.fill('rgba(0,0,0,0.5)')\n    p.text(`FPS: ${fps && fps.toFixed(0)}`, 6, Size - 6)\n  }\n}\n\nexport default sketch1","import React, { useState, FunctionComponent } from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport FullscreenDemo from 'layouts/FullscreenDemo'\nimport { Interface$, Corner$ } from 'layouts/FullscreenDemo/styles'\nimport { Colors } from 'constants/Styles'\nimport P5Sketch from 'components/P5Sketch'\nimport PageTitle from 'components/PageTitle'\nimport SettingsPanel from 'components/SettingsPanel'\nimport sketch, { defaultSettings } from 'sketches/noise'\nimport sketchSettings from 'sketches/noise/sketchSettings'\nimport SEO from 'components/seo'\n\nconst SineSeries1: FunctionComponent = () => {\n  const [settings, setSettings] = useState(defaultSettings)\n\n  return (\n    <div className=\"light-theme\">\n      <SEO title=\"Noise\" /> \n\n      <FullscreenDemo>\n        <Interface$>\n          <Corner$ top left>\n            <PageTitle title='Perlin noise' />\n            <Link to=\"/\">Home</Link>\n          </Corner$>\n\n          <Corner$ top right> \n            {/* <SettingsPanel onChange={setSettings} settings={sketchSettings} /> */}\n          </Corner$>\n        </Interface$>\n\n        <SketchFrame$>\n          <SketchWrapper$>\n            <P5Sketch sketch={sketch(settings)} />\n          </SketchWrapper$>\n        </SketchFrame$>\n      </FullscreenDemo>\n    </div>\n  )\n}\n\nexport default React.memo(SineSeries1)\n\n//#region Styled\nconst SketchFrame$ = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  line-height: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: ${Colors.CSS.bg}\n`\n\nconst SketchWrapper$ = styled.div`\n  overflow: hidden;\n  border-radius: 4px;\n  box-shadow: 0px 4px 8px rgba(0,0,0,0.1);\n  overflow: hidden;\n  border: 1px solid rgba(0,0,0,0.1);\n`\n//#endregion"],"sourceRoot":""}