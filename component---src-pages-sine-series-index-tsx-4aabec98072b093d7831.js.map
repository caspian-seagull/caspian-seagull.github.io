{"version":3,"sources":["webpack:///./src/components/SquareGrid/index.tsx","webpack:///./src/pages/sine-series/index.tsx","webpack:///./src/utils/Media.ts","webpack:///./src/components/Title/index.tsx","webpack:///./src/layouts/PageLayout/index.tsx","webpack:///./src/constants/Themes.ts"],"names":["SquareGrid","gap","children","SquareGrid$","Cell","linkTo","SquareCell$","to","SquareCellContent$","styled","div","Media","Phone","SineSeries","PageLayout","layoutTheme","ThemeNames","dark","title","BreakPoints","args","console","log","css","Tablet","Laptop","Desktop","Title","h1","theme","text","titleLink","subtitle","PageThemes","Page$","GlobalStyles","Content$","Header$","Subtitle$","createGlobalStyle","main","background","header","gray","textSecondary","light"],"mappings":"oVAaO,IAAMA,EAAkD,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,SAAR,OAC7D,kBAACC,EAAD,CAAaF,IAAKA,GACfC,IAIQE,EAA4C,SAAC,GAAyB,IAAvBC,EAAuB,EAAvBA,OAAQH,EAAe,EAAfA,SAClE,OAAIG,EAEA,kBAACC,EAAD,KACE,kBAAC,OAAD,CAAMC,GAAIF,GACR,kBAACG,EAAD,KACGN,KAQT,kBAACI,EAAD,KACE,kBAACE,EAAD,KACGN,KAOHC,EAA4CM,IAAOC,IAAV,oCAAGD,CAAH,4IAK1B,qBAAGR,OACN,qBAAGA,MAEjBU,IAAMC,MARqC,MAazCN,EAAcG,IAAOC,IAAV,oCAAGD,CAAH,6EAUXD,EAAqBC,IAAOC,IAAV,oCAAGD,CAAH,4DC9CTI,UAbI,WACjB,OACE,kBAACC,EAAA,EAAD,CAAYC,YAAaC,IAAWC,KAAMC,MAAM,eAC9C,kBAAC,EAAD,CAAYjB,IAAK,IACf,kBAAC,EAAD,CAAMI,OAAO,sBAAb,KACA,kBAAC,EAAD,CAAMA,OAAO,IAAb,KACA,kBAAC,EAAD,CAAMA,OAAO,IAAb,KACA,kBAAC,EAAD,CAAMA,OAAO,IAAb,S,kCCbR,gBAEMc,EACG,IADHA,EAEI,KAFJA,EAGI,KAGJR,EAAQ,CACZC,MAAO,SAACQ,GAEN,OADAC,QAAQC,IAAIF,GACLG,YAAP,kCACqBJ,EACjBC,EAAK,KAIXI,OAAQ,SAACJ,GAAD,OAAgCG,YAA/B,CAAD,gCACeJ,EACjBC,IAINK,OAAQ,SAACL,GAAD,OAA+BG,YAA9B,CAAD,kCACeJ,EACjBC,IAINM,QAAS,SAACN,GAAD,OAA+BG,YAA9B,CAAD,kCACcJ,EAAmB,EACpCC,KAKOT,O,wNC/Bf,IAqBegB,EArBDlB,IAAOmB,GAAV,oCAAGnB,CAAH,sLAQA,qBAAGoB,MAAkBC,QAInB,qBAAGD,MAAkBC,OAI9BnB,IAAMC,MAhBC,M,ocCSJ,IAAME,EAAoD,SAAC,GAA0D,IAAxDZ,EAAwD,EAAxDA,SAAUgB,EAA8C,EAA9CA,MAAOH,EAAuC,EAAvCA,YAAagB,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAC3G,OACE,kBAAC,IAAD,CAAeH,MAAOI,IAAWlB,IAC/B,kBAACmB,EAAD,KACE,kBAACC,EAAD,MAEA,kBAACC,EAAD,KACE,kBAACC,EAAD,KACGnB,GACC,kBAAC,EAAD,KACIa,EAAY,kBAAC,OAAD,CAAMxB,GAAIwB,GAAYb,GAAgBA,GAIvDc,GAAY,kBAACM,EAAD,KAAYN,IAG1B9B,MAQLiC,EAAeI,YAAH,KAKL,qBAAGV,MAA8BC,QAIxCI,EAAQzB,IAAO+B,KAAV,oCAAG/B,CAAH,4DAGK,qBAAGoB,MAA+BY,cACvC,qBAAGZ,MAA+BC,QAGvCM,EAAW3B,IAAOC,IAAV,oCAAGD,CAAH,oCAKVE,IAAMC,MALI,MAURyB,EAAU5B,IAAOiC,OAAV,oCAAGjC,CAAH,uEAEgB,qBAAGoB,MAA8Bc,OAG1DhC,IAAMC,MALG,MAWP0B,EAAY7B,IAAOC,IAAV,oCAAGD,CAAH,iHAMJ,qBAAGoB,MAA8Be,kB,wCClFhC5B,E,6EAAAA,K,YAAAA,E,eAAAA,M,KAcL,IAAMiB,IAAU,MACpBjB,EAAWC,MAAO,CACjBwB,WAAY,UACZX,KAAM,UACNc,cAAe,4BACfD,KAAM,4BALa,EAQpB3B,EAAW6B,OAAQ,CAClBJ,WAAY,UACZX,KAAM,OACNc,cAAe,qBACfD,KAAM,sBAZa","file":"component---src-pages-sine-series-index-tsx-4aabec98072b093d7831.js","sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from 'styled-components'\nimport Media from 'utils/Media'\nimport { Link } from 'gatsby'\n\ninterface GridProps {\n  gap?: number\n}\n\ninterface CellProps {\n  linkTo?: string\n}\n\nexport const SquareGrid: React.StatelessComponent<GridProps> = ({ gap, children }) => (\n  <SquareGrid$ gap={gap}>\n    {children}\n  </SquareGrid$>\n)\n\nexport const Cell: React.StatelessComponent<CellProps> = ({ linkTo, children }) => {\n  if (linkTo) {\n    return (\n      <SquareCell$>\n        <Link to={linkTo}>\n          <SquareCellContent$>\n            {children}\n          </SquareCellContent$>  \n        </Link>\n      </SquareCell$>\n    )\n  }\n\n  return (\n    <SquareCell$>\n      <SquareCellContent$>\n        {children}\n      </SquareCellContent$>  \n    </SquareCell$>\n  )\n}\n\n//region Styled\nconst SquareGrid$: FunctionComponent<GridProps> = styled.div`\n  position: relative;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: 1fr;\n  grid-column-gap: ${({ gap }: GridProps) => gap}px;\n  grid-row-gap: ${({ gap }: GridProps) => gap}px;\n\n  ${Media.Phone`\n    grid-template-columns: repeat(1, 1fr);\n  `}\n`\n\nconst SquareCell$ = styled.div`\n  position: relative;\n  \n  &::before {\n    content: '';\n    display: block;\n    padding-top: 100%;\n  }\n`\n\nconst SquareCellContent$ = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`\n//endregion","import React from 'react'\nimport styled from 'styled-components'\nimport { PageLayout } from 'layouts/PageLayout'\nimport { ThemeNames } from 'constants/Themes'\nimport { SquareGrid, Cell } from 'components/SquareGrid'\n\nconst SineSeries = () => {\n  return(\n    <PageLayout layoutTheme={ThemeNames.dark} title='Sine series'>\n      <SquareGrid gap={32}>\n        <Cell linkTo='sine-series/sine-1'>1</Cell>\n        <Cell linkTo=''>2</Cell>\n        <Cell linkTo=''>3</Cell>\n        <Cell linkTo=''>4</Cell>\n      </SquareGrid>\n    </PageLayout>\n  )\n}\n\nexport default SineSeries\n\nconst CellContent$ = styled.button`\n\n`","import { css } from 'styled-components'\n\nconst BreakPoints = {\n  Phone: 767,\n  Tablet: 1023,\n  Laptop: 1279,\n}\n\nconst Media = {\n  Phone: (args: TemplateStringsArray) => {\n    console.log(args)\n    return css`\n    @media (max-width: ${BreakPoints.Phone}px) {\n      ${args[0]}\n    }\n  `},\n\n  Tablet: (args: TemplateStringsArray) => css`\n    @media (max-width: ${BreakPoints.Tablet}) {\n      ${args};\n    }\n  `,\n\n  Laptop: (args: TemplateStringsArray)=> css`\n    @media (max-width: ${BreakPoints.Laptop}px) {\n      ${args};\n    }\n  `,\n\n  Desktop: (args: TemplateStringsArray)=> css`\n    @media (min-width: ${BreakPoints.Laptop+1}px) {\n      ${args};\n    }\n  `,\n}\n\nexport default Media","import React from 'react'\nimport styled from 'styled-components'\nimport { PageThemeI } from 'constants/Themes'\nimport Media from 'utils/Media'\n\nconst Title = styled.h1`\n  font-family: 'oswald';\n  text-transform: uppercase;\n  font-size: 48px;\n  letter-spacing: 2px;\n  font-weight: 300;\n  margin: 0;\n  line-height: 1;\n  color: ${({ theme }) => theme.text};\n\n  a,\n  a:visited {\n    color: ${({ theme }) => theme.text};\n    text-decoration: none;\n  }\n\n  ${Media.Phone`\n    font-size: 32px;\n  `}\n`\n\nexport default Title\n","import React from 'react'\nimport styled, { createGlobalStyle, ThemeProvider } from 'styled-components'\nimport Title from 'components/Title'\nimport { PageThemes, ThemeNames, PageThemeI } from 'constants/Themes'\nimport Media from 'utils/Media'\nimport { Link } from 'gatsby'\n\ninterface LayoutProps {\n  title?: string\n  subtitle?: string\n  titleLink?: string\n  layoutTheme?: ThemeNames\n}\n\nexport const PageLayout: React.StatelessComponent<LayoutProps> = ({ children, title, layoutTheme, titleLink, subtitle }) => {\n  return(\n    <ThemeProvider theme={PageThemes[layoutTheme]}>\n      <Page$>      \n        <GlobalStyles/>\n        \n        <Content$>\n          <Header$>\n            {title && (\n              <Title>\n                { titleLink ? <Link to={titleLink}>{title}</Link> : title }\n              </Title>\n            )}\n\n            {subtitle && <Subtitle$>{subtitle}</Subtitle$>}\n          </Header$>\n\n          {children}\n        </Content$>  \n      </Page$>\n    </ThemeProvider>\n  )\n}\n\n//region Styled\nconst GlobalStyles = createGlobalStyle`\n  body {\n    margin: 0;\n    width: 100vw;\n    min-height: 100vh;\n    color: ${({ theme }: PageThemeI) => theme.text}\n  }\n`\n\nconst Page$ = styled.main`\n  width: 100vw;\n  min-height: 100vh;\n  background: ${({ theme }: PageThemeI ) => theme.background};\n  color: ${({ theme }: PageThemeI ) => theme.text };\n` \n\nconst Content$ = styled.div`\n  max-width: 900px;\n  margin: auto;\n\n\n  ${Media.Phone`\n    padding: 0 24px;\n  `}\n`\n\nconst Header$ = styled.header`\n  padding: 32px 0;\n  border-bottom: 1px solid ${({ theme }: PageThemeI) => theme.gray};\n  margin-bottom: 32px;\n\n  ${Media.Phone`\n    padding: 20px 0;\n    font-size: 32px;\n  `}\n`\n\nconst Subtitle$ = styled.div`\n  font-size: 10px;\n  font-family: sans-serif;\n  margin-top: 10px;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  color: ${({ theme }: PageThemeI) => theme.textSecondary}\n`\n//endregion","export enum ThemeNames {\n  dark = 'dark',\n  light = 'light'\n}\n\nexport interface PageThemeI {\n  theme: {\n    background: string,\n    text: string,\n    textSecondary: string,\n    gray: string\n  }\n}\n\nexport const PageThemes = {\n  [ThemeNames.dark]: {\n    background: '#101010',\n    text: '#fafafa',\n    textSecondary: 'rgba(255, 255, 255, 0.75)',\n    gray: 'rgba(255, 255, 255, 0.1)'\n  },\n\n  [ThemeNames.light]: {\n    background: '#fafafa',\n    text: '#222',\n    textSecondary: 'rgba(0, 0, 0, 0.1)',\n    gray: 'rgba(0, 0, 0, 0.3)'\n  },\n}\n"],"sourceRoot":""}