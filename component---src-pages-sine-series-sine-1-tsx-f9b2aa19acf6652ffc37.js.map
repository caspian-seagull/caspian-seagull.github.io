{"version":3,"sources":["webpack:///./src/utils/Media.ts","webpack:///./src/components/Canvas/index.tsx","webpack:///./src/pages/sine-series/sine-1.tsx","webpack:///./src/components/Title/index.tsx","webpack:///./src/layouts/PageLayout/index.tsx","webpack:///./src/constants/Themes.ts"],"names":["BreakPoints","Media","Phone","args","console","log","css","Tablet","Laptop","Desktop","Canvas","React","createRef","isFullscreen","setState","state","componentDidMount","canvas","this","canvasRef","current","ctx","getContext","props","sketch","render","canvasProps","fullscreen","bgColor","CanvasContainer$","ref","FullSreenButton$","onClick","toggleFullScreen","Component","styled","div","theme","background","button","draw","window","requestAnimationFrame","SineSeries1","PageLayout","titleLink","layoutTheme","ThemeNames","dark","title","subtitle","Title","h1","text","children","PageThemes","Page$","GlobalStyles","Content$","Header$","to","Subtitle$","createGlobalStyle","main","header","gray","textSecondary","light"],"mappings":"2FAAA,gBAEMA,EACG,IADHA,EAEI,KAFJA,EAGI,KAGJC,EAAQ,CACZC,MAAO,SAACC,GAEN,OADAC,QAAQC,IAAIF,GACLG,YAAP,kCACqBN,EACjBG,EAAK,KAIXI,OAAQ,SAACJ,GAAD,OAAgCG,YAA/B,CAAD,gCACeN,EACjBG,IAINK,OAAQ,SAACL,GAAD,OAA+BG,YAA9B,CAAD,kCACeN,EACjBG,IAINM,QAAS,SAACN,GAAD,OAA+BG,YAA9B,CAAD,kCACcN,EAAmB,EACpCG,KAKOF,O,yWCgBAS,E,4KAnCmCC,IAAMC,a,eAE9C,CACNC,cAAc,I,2BAGG,kBAAM,EAAKC,SAAS,CAAED,cAAe,EAAKE,MAAMF,kB,oHAEnEG,kBAAA,WACE,IAAMC,EAASC,KAAKC,UAAUC,QACxBC,EAAMH,KAAKC,UAAUC,QAAQE,WAAW,MAE1CJ,KAAKK,MAAMC,QACbN,KAAKK,MAAMC,OAAO,CAAEH,MAAKJ,Y,EAI7BQ,OAAA,WAAS,IACCZ,EAAiBK,KAAKH,MAAtBF,aADD,EAEsCK,KAAKK,MAA1CG,EAFD,EAECA,YAAaC,EAFd,EAEcA,WAAYC,EAF1B,EAE0BA,QAEjC,OACE,kBAACC,EAAD,CAAkBD,QAASA,EAASD,WAAYd,GAC9C,4CAAYa,EAAZ,CAAyBI,IAAKZ,KAAKC,aAGjCQ,GACE,kBAACI,EAAD,CAAkBC,QAASd,KAAKe,qB,GA5BvBtB,IAAMuB,WAsCrBL,EAAmBM,IAAOC,IAAV,oCAAGD,CAAH,8IAGlB,gBAAGR,EAAH,EAAGA,WAAYC,EAAf,EAAeA,QAAf,OAA2CD,EAAarB,YAAH,4FAOjC,gBAAG+B,EAAH,EAAGA,MAAH,OAAeT,GAAoBS,EAAMC,cAC3D,MAiBAP,EAAmBI,IAAOI,OAAV,oCAAGJ,CAAH,0RC7EhBX,EAAS,SAAC,GAAmC,EAAjCH,IAAiC,EAA5BJ,OAKrB,SAASuB,IACPC,OAAOC,sBAAsBF,GAJ7BA,KAuBWG,UAb+B,WAC5C,OACE,kBAACC,EAAA,EAAD,CACEC,UAAU,eACVC,YAAaC,IAAWC,KACxBC,MAAM,cACNC,SAAS,UAET,kBAAC,EAAD,CAAQvB,YAAU,EAACH,OAAQA,O,wNCpBjC,IAqBe2B,EArBDhB,IAAOiB,GAAV,oCAAGjB,CAAH,sLAQA,qBAAGE,MAAkBgB,QAInB,qBAAGhB,MAAkBgB,OAI9BpD,IAAMC,MAhBC,M,ocCSJ,IAAM0C,EAAoD,SAAC,GAA0D,IAAxDU,EAAwD,EAAxDA,SAAUL,EAA8C,EAA9CA,MAAOH,EAAuC,EAAvCA,YAAaD,EAA0B,EAA1BA,UAAWK,EAAe,EAAfA,SAC3G,OACE,kBAAC,IAAD,CAAeb,MAAOkB,IAAWT,IAC/B,kBAACU,EAAD,KACE,kBAACC,EAAD,MAEA,kBAACC,EAAD,KACE,kBAACC,EAAD,KACGV,GACC,kBAAC,EAAD,KACIJ,EAAY,kBAAC,OAAD,CAAMe,GAAIf,GAAYI,GAAgBA,GAIvDC,GAAY,kBAACW,EAAD,KAAYX,IAG1BI,MAQLG,EAAeK,YAAH,KAKL,qBAAGzB,MAA8BgB,QAIxCG,EAAQrB,IAAO4B,KAAV,oCAAG5B,CAAH,4DAGK,qBAAGE,MAA+BC,cACvC,qBAAGD,MAA+BgB,QAGvCK,EAAWvB,IAAOC,IAAV,oCAAGD,CAAH,oCAKVlC,IAAMC,MALI,MAURyD,EAAUxB,IAAO6B,OAAV,oCAAG7B,CAAH,uEAEgB,qBAAGE,MAA8B4B,OAG1DhE,IAAMC,MALG,MAWP2D,EAAY1B,IAAOC,IAAV,oCAAGD,CAAH,iHAMJ,qBAAGE,MAA8B6B,kB,wCClFhCnB,E,6EAAAA,K,YAAAA,E,eAAAA,M,KAcL,IAAMQ,IAAU,MACpBR,EAAWC,MAAO,CACjBV,WAAY,UACZe,KAAM,UACNa,cAAe,4BACfD,KAAM,4BALa,EAQpBlB,EAAWoB,OAAQ,CAClB7B,WAAY,UACZe,KAAM,OACNa,cAAe,qBACfD,KAAM,sBAZa","file":"component---src-pages-sine-series-sine-1-tsx-f9b2aa19acf6652ffc37.js","sourcesContent":["import { css } from 'styled-components'\n\nconst BreakPoints = {\n  Phone: 767,\n  Tablet: 1023,\n  Laptop: 1279,\n}\n\nconst Media = {\n  Phone: (args: TemplateStringsArray) => {\n    console.log(args)\n    return css`\n    @media (max-width: ${BreakPoints.Phone}px) {\n      ${args[0]}\n    }\n  `},\n\n  Tablet: (args: TemplateStringsArray) => css`\n    @media (max-width: ${BreakPoints.Tablet}) {\n      ${args};\n    }\n  `,\n\n  Laptop: (args: TemplateStringsArray)=> css`\n    @media (max-width: ${BreakPoints.Laptop}px) {\n      ${args};\n    }\n  `,\n\n  Desktop: (args: TemplateStringsArray)=> css`\n    @media (min-width: ${BreakPoints.Laptop+1}px) {\n      ${args};\n    }\n  `,\n}\n\nexport default Media","import React from 'react'\nimport styled, { css } from 'styled-components'\n\nexport interface SketchParamsI {\n  ctx: CanvasRenderingContext2D,\n  canvas: HTMLCanvasElement\n}\n\ninterface CanvasPropsI {\n  stretch?: boolean\n  fullscreen?: boolean\n  bgColor?: string\n  sketch?: (params: SketchParamsI) => void\n  canvasProps?: React.HTMLProps<HTMLCanvasElement>\n}\n\nclass Canvas extends React.Component<CanvasPropsI> {\n  canvasRef: React.RefObject<HTMLCanvasElement> = React.createRef()\n\n  state = {\n    isFullscreen: false\n  }\n\n  toggleFullScreen = () => this.setState({ isFullscreen: !this.state.isFullscreen })\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current\n    const ctx = this.canvasRef.current.getContext('2d')\n\n    if (this.props.sketch) {\n      this.props.sketch({ ctx, canvas })\n    }\n  }\n\n  render() {\n    const { isFullscreen } = this.state\n    const { canvasProps, fullscreen, bgColor } = this.props\n\n    return (\n      <CanvasContainer$ bgColor={bgColor} fullscreen={isFullscreen}>\n        <canvas {...canvasProps} ref={this.canvasRef} />\n\n        {\n          fullscreen && (\n            <FullSreenButton$ onClick={this.toggleFullScreen} />\n          )\n        }\n      </CanvasContainer$>\n    )\n  }\n}\n\nexport default Canvas\n\nconst CanvasContainer$ = styled.div`\n  position: relative;\n\n  ${({ fullscreen, bgColor }: CanvasPropsI) => fullscreen ? css`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: 100;\n    background-color: ${({ theme }) => bgColor ? bgColor : theme.background};\n  ` : ''}\n\n  &::after {\n    content: '';\n    display: block;\n    padding-top: 100%;\n  }\n\n  canvas {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n`\n\nconst FullSreenButton$ = styled.button`\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  border: none;\n  border-radius: 4px;\n  background-color: rgba(255, 255, 255, 0.1);\n  padding: 0;\n  width: 48px;\n  height: 48px;\n  transition: all .3s ease;\n  cursor: pointer;\n  background-image: url('images/fullscreen.svg');\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n`","import React from 'react'\nimport { ThemeNames } from 'constants/Themes'\nimport { PageLayout } from 'layouts/PageLayout'\nimport Canvas, { SketchParamsI } from 'components/Canvas'\n\nconst sketch = ({ ctx, canvas }: SketchParamsI) => {\n  function start() {\n    draw()\n  }\n\n  function draw() {\n    window.requestAnimationFrame(draw);\n  }\n\n  start();\n}\n\nconst SineSeries1: React.StatelessComponent = () => {\n  return (\n    <PageLayout\n      titleLink='sine-series/'\n      layoutTheme={ThemeNames.dark}\n      title='Sine series'\n      subtitle='Sine 1'\n    >\n      <Canvas fullscreen sketch={sketch} />\n    </PageLayout>\n  )\n}\n\nexport default SineSeries1","import React from 'react'\nimport styled from 'styled-components'\nimport { PageThemeI } from 'constants/Themes'\nimport Media from 'utils/Media'\n\nconst Title = styled.h1`\n  font-family: 'oswald';\n  text-transform: uppercase;\n  font-size: 48px;\n  letter-spacing: 2px;\n  font-weight: 300;\n  margin: 0;\n  line-height: 1;\n  color: ${({ theme }) => theme.text};\n\n  a,\n  a:visited {\n    color: ${({ theme }) => theme.text};\n    text-decoration: none;\n  }\n\n  ${Media.Phone`\n    font-size: 32px;\n  `}\n`\n\nexport default Title\n","import React from 'react'\nimport styled, { createGlobalStyle, ThemeProvider } from 'styled-components'\nimport Title from 'components/Title'\nimport { PageThemes, ThemeNames, PageThemeI } from 'constants/Themes'\nimport Media from 'utils/Media'\nimport { Link } from 'gatsby'\n\ninterface LayoutProps {\n  title?: string\n  subtitle?: string\n  titleLink?: string\n  layoutTheme?: ThemeNames\n}\n\nexport const PageLayout: React.StatelessComponent<LayoutProps> = ({ children, title, layoutTheme, titleLink, subtitle }) => {\n  return(\n    <ThemeProvider theme={PageThemes[layoutTheme]}>\n      <Page$>      \n        <GlobalStyles/>\n        \n        <Content$>\n          <Header$>\n            {title && (\n              <Title>\n                { titleLink ? <Link to={titleLink}>{title}</Link> : title }\n              </Title>\n            )}\n\n            {subtitle && <Subtitle$>{subtitle}</Subtitle$>}\n          </Header$>\n\n          {children}\n        </Content$>  \n      </Page$>\n    </ThemeProvider>\n  )\n}\n\n//region Styled\nconst GlobalStyles = createGlobalStyle`\n  body {\n    margin: 0;\n    width: 100vw;\n    min-height: 100vh;\n    color: ${({ theme }: PageThemeI) => theme.text}\n  }\n`\n\nconst Page$ = styled.main`\n  width: 100vw;\n  min-height: 100vh;\n  background: ${({ theme }: PageThemeI ) => theme.background};\n  color: ${({ theme }: PageThemeI ) => theme.text };\n` \n\nconst Content$ = styled.div`\n  max-width: 900px;\n  margin: auto;\n\n\n  ${Media.Phone`\n    padding: 0 24px;\n  `}\n`\n\nconst Header$ = styled.header`\n  padding: 32px 0;\n  border-bottom: 1px solid ${({ theme }: PageThemeI) => theme.gray};\n  margin-bottom: 32px;\n\n  ${Media.Phone`\n    padding: 20px 0;\n    font-size: 32px;\n  `}\n`\n\nconst Subtitle$ = styled.div`\n  font-size: 10px;\n  font-family: sans-serif;\n  margin-top: 10px;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  color: ${({ theme }: PageThemeI) => theme.textSecondary}\n`\n//endregion","export enum ThemeNames {\n  dark = 'dark',\n  light = 'light'\n}\n\nexport interface PageThemeI {\n  theme: {\n    background: string,\n    text: string,\n    textSecondary: string,\n    gray: string\n  }\n}\n\nexport const PageThemes = {\n  [ThemeNames.dark]: {\n    background: '#101010',\n    text: '#fafafa',\n    textSecondary: 'rgba(255, 255, 255, 0.75)',\n    gray: 'rgba(255, 255, 255, 0.1)'\n  },\n\n  [ThemeNames.light]: {\n    background: '#fafafa',\n    text: '#222',\n    textSecondary: 'rgba(0, 0, 0, 0.1)',\n    gray: 'rgba(0, 0, 0, 0.3)'\n  },\n}\n"],"sourceRoot":""}